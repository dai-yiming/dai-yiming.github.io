.. _matlab_guide:

=========================
MATLAB Guide
=========================

This is an elegant-design introduction to MATLAB, geared mainly for new users. You can see more complex recipes at `MATLAB`_.

As for getting help, MATLAB uses ``help func`` to get documentation on the function `func` within the command window, and uses ``doc func`` to open the documentation page with external browser. Also, it uses ``type func`` for user-defined source code.


Object creation
--------------------------

Several methods to create Numpy arrays are available, and we should contain homogeneous elements only for optimal efficiency. The simplest way is

.. code-block:: matlab

   >> [3 5] % row vector
   >> [3;5] % column vector
   >> [1, 2, 3; 4, 5, 6] % matrix
   >> ndims(a) # number of dimensions
   >> numel(a) # number of elements
   >> size(a)  # shape of matrix

Preallocation is an option for the growth acceleration of arrays

.. code-block:: matlab

   >> rand(n)  % square matrix cols in U(0,1)
   >> randn(n) % square matrix cols in N(0,1)
   >> randi([upper lower], n) % square matrix cols in U(u,l)
   >> zeros(m, n) % mxn matrix
   >> ones(n) % square matrix
   >> eye(n) % identity matrix
   >> diag(n) % 2D diagonal matrix

In addition, we could use ``:`` and ``linspace`` to create evenly spaced vectors, and both methods' `end` parameter is border-inclusive

.. code-block:: matlab

   %  start : space : end
   >>   0   :   1   :  6
   %  linspace(start, end, steps)
   >> linspace(  0  ,  6 ,   7  )

The results for above two methods are the same: a list of size seven counting from zero to six.

Use ``meshgrid`` to generate grid for optimal efficiency which generates two 2D matrices with identical shape

.. code-block:: matlab

   >> [x, y] = meshgrid(0:2, 0:3)
   x =  0     1     2
        0     1     2
        0     1     2
        0     1     2

   y =  0     0     0
        1     1     1
        2     2     2
        3     3     3

In order to make a deep copy, direct assigning the result to a new variable.

Stack matrices are easy in MATLAB, either vertical or horizontal

.. code-block:: matlab

   >> a = [0, 1, 2]
   >> b = [3, 4, 5]
   >> [a b] % horizontal
   ans = 0 1 2 3 4 5

   >> [a;b] % vertical
   ans = 0   1   2
         3   4   5

To create an array of strings or a cell array, commonly used by pie chart, use curly bracket ``{}``.

.. code-block:: matlab

   cryptoNames = {"BTC", "SNX", "YFI"}


Object indexing
--------------------------

The common method to index an array is ``a(start:step:stop)``. If we want to access the last element, use ``end`` logical value.

.. code-block:: matlab

   >> y(1:2:end, :)
   ans = 0     0     0
         2     2     2
   % extract the second row
   >> y(:, 2)
   >> y(1:4, 2)
   >> y(1:end, 2)

   >> y(1, 2) = 5 % change value
   y = 0     5     0
       1     1     1
       2     2     2
       3     3     3


Logics & boolean mask
-------------------------

Numpy uses `and` ``&`` , `or` ``|``, and `not` ``~`` for logical operations with application for boolean mask

.. code-block:: matlab

   >> y(y >1)'
   ans = 2 3 5 2 3 2 3

   >> y((y < 3) | (y > 4))'
   ans = 0 1 2 5 1 2 0 1 2

   >> y(y > 1 & y < 3)'
   ans = 2 2 2

   >> mask = ~(y < 3)
   mask = 0   1   0
          0   0   0
          0   0   0
          1   1   1

   >> y(mask)
   ans = 3 5 3 3

Use ``find`` to generate indices that met the condition to the original ndarray

.. code-block:: matlab

   >> criteria = find(y > 2) % indices
   criteria = 4 5 8 12

   >> y(criteria)
   ans = 3 5 3 3

Now we illustrate the `if` and `for` loops

.. code-block:: matlab

   if x < 0
      y = -1
   elseif x == 0
      y = 0
   else
      y = 1
   end

.. code-block:: matlab

   for i = 1:3
      fprintf('%i\n', i)
   end


Mathematics
-------------------------

Operations between a matrix and a scalar include ``+``, ``-``, ``*``, ``^``, ``/``.

Element-wise operations between matrices with broadcasting concept include ``+``, ``-``, ``.*``, ``.^``, ``./`` , ``sqrt``, ``nthroot``, ``exp``, ``log``, ``[trigonometry]``, ``floor``, ``ceil``, ``round``, ``mod`` etc. 

Statistical operations include ``max``, ``min``, ``sum``, ``mean``, ``median``, ``std``, ``var``, ``prctile``, ``all``, ``any``, ``.'`` for transpose, ``'`` for conjugate transpose, etc. These operations are default as column-wise, we could conduct row-wise operations by ``func(x, 2)``,Moreover,

- ``*``: matrix multiplication
- ``/``: solve linear systems of equations
- ``diff``: calculate differences between adjacent elements of the input
- ``[]``: a placeholder to skip a parameter

.. code-block:: matlab

   >> nthroot(y, 2)
   ans =      0         0         0
         1.0000    1.0000    1.0000
         1.4142    1.4142    1.4142
         1.7321    1.7321    1.7321

   >> [1 1; 1 1]*[2 2;2 2]
   ans = 4   4
         4   4

   >> [1 1; 1 1].*[2 2;2 2]
   ans = 2   2
         2   2

   >> mean(y)
   ans = 1.5000  2.7500  1.5000

   >> min(returns, [], 2) % mean return in a row vector

some functions above have polymorphism for multiple outputs

.. code-block:: matlab

   >> [nrow, ncol] = size(x)
   >> [xMax, idx] = max(x)

For more information about operation and special characters, check out official documentation for `operation`_ and `special characters`_. 


Graphics
-------------------------

Use ``plot(x, y[, "format", *args])`` to create line plots of numeric data, ``hold on`` to draw multiple plots on the same canvas, and ``hold off`` to create a new axes for the next plotted line. For more information about plots, check out official documentation for `plots`_. 

To create multiple figures simultaneously, we use ``figure`` and make figure number `k` active by ``figure(k)``. To close one or more figures, we use ``close`` to close current active window, ``close(k)`` to close window number k, and ``close all`` to close all figures windows.

Currently, we only discuss about drawing one plot per window. If we want to create multiple axes within a single window, using ``subplot(m,n,k)`` to create an active set of axes at the `kth` position in an `m-by-n` grid . If axes already exist in this location, they are made active. The axes in the grid are numbered sequentially left-to-right, then top-to-bottom.

.. code-block:: matlab

   >> x = (1:1:100)
   >> BTC = randi([20000, 22000], 100, 1)
   >> YFI = randi([19500, 21500], 100, 1)
   >> subplot(2, 1, 1)
   >> plot(x, BTC, "r+", "LineWidth", 1)
   >> hold on
   >> plot(x, YFI, "Color", [0.3 0.3 0.8])
   >> title("Cryptocurrency Price Changes")
   >> xlabel("Days")
   >> ylabel("Price in " + char(163))
   >> legend("BTC", "YFI", "Location", "best")
   >> xlim([1 100])
   >> hold off
   >> subplot(2, 1, 2)
   >> histogram(BTC, 40, "DisplayStyle", "stairs")
   >> hold on
   >> histogram(YFI, 40, "EdgeColor", "none")
   >> var = prctile(BTC, 25)
   >> plot([var var], [0, 0.9]) 
   >> title("Cryptocurrency Price Histogram")
   >> xlabel("Price in " + char(163))
   >> ylabel("Frequency")
   >> legend("BTC", "YFI", "Location", "best")
   >> grid on
   >> hold off

A possible output for the code above could be

.. image:: ../_static/img/matlab_plot_eg.png
   :scale: 60%
   :align: center


Desktop management
-------------------------

- ``save file``: save current workspace to `file.mat`
- ``load file``: load variables in `file.mat` to the workspace
- ``clear [var]``: clear certain variable from the workspace, or clear all if not specified
- ``clc``: clear all text from the Command Window
- ``format bank/short/long``: set 2/4/16 digits for numeric display
- ``xlsread``: import data from an Excel file

.. code-block:: matlab

   [num, txt] = xlsread(filename, sheetname)

    
.. _MATLAB: https://www.mathworks.com/help/index.html?s_tid=CRUX_lftnav
.. _operation: https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html
.. _special characters: https://www.mathworks.com/help/matlab/creating_plots/greek-letters-and-special-characters-in-graph-text.html
.. _plots: https://www.mathworks.com/help/matlab/creating_plots/types-of-matlab-plots.html
